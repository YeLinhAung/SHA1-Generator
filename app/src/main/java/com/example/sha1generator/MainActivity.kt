package com.example.sha1generator

import android.os.Bundle
import android.view.Menu
import android.view.MenuItem
import android.view.View
import android.view.WindowManager
import android.widget.AdapterView
import android.widget.ArrayAdapter
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import com.example.sha1generator.data.PaymentCreateRequest
import com.google.gson.GsonBuilder
import kotlinx.android.synthetic.main.activity_main.*
import org.json.JSONObject
import javax.crypto.Mac
import javax.crypto.spec.SecretKeySpec


class MainActivity : AppCompatActivity() {

    companion object {
        const val staticSecretKey = "0xfbhb5Knea7DRaTz7gWdDgGCgg="
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        setUpUI()
        catchEvent()

    }

    override fun onCreateOptionsMenu(menu: Menu?): Boolean {
        val inflater = menuInflater
        inflater.inflate(R.menu.menu, menu)
        return true
    }

    override fun onOptionsItemSelected(item: MenuItem): Boolean {

        when (item.itemId) {
            R.id.clearMenu -> clearTexts()
        }
        return true
    }

    override fun onSaveInstanceState(outState: Bundle) {
        super.onSaveInstanceState(outState)
        outState.putString("jsonStr", edtJsonString.text.toString())
        outState.putString("secretStr", edtSecretKey.text.toString())
        outState.putString("signStr", tvSign.text.toString())
    }

    override fun onRestoreInstanceState(savedInstanceState: Bundle) {
        super.onRestoreInstanceState(savedInstanceState)
        edtJsonString.setText(savedInstanceState.getString("jsonStr"))
        edtSecretKey.setText(savedInstanceState.getString("secretStr"))
        tvSign.text = savedInstanceState.getString("signStr")
    }

    private fun setUpUI(){

        window.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN)
        window.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN)

        val optionList = listOf("JSON to Hex", "Query to Hex")
        val arrayAdapter = ArrayAdapter(this, android.R.layout.simple_spinner_dropdown_item, optionList)
        spinnerOption.adapter = arrayAdapter

    }

    private fun catchEvent(){

        btnGenerate.setOnClickListener {
            tvSign.text = "Sign"
            generateSign()
        }

        spinnerOption.onItemSelectedListener = object : AdapterView.OnItemSelectedListener{

            override fun onNothingSelected(parent: AdapterView<*>?) {

            }

            override fun onItemSelected(
                parent: AdapterView<*>?,
                view: View?,
                position: Int,
                id: Long
            ) {
                when (position){

                    0 -> { edtJsonString.hint = "JSON"; edtJsonString.text.clear() }
                    1 -> { edtJsonString.hint = "QUERY"; edtJsonString.text.clear() }

                }
            }
        }

    }

    private fun generateSign(){

        try {

            val queryStr = if (spinnerOption.selectedItemPosition == 0){
                getQueryString(getJsonString())
            } else{
                getQueryString()
            }

            var secretKey = edtSecretKey.text.toString()
            if (secretKey.isNullOrBlank()) secretKey = staticSecretKey

            val mac = Mac.getInstance("HmacSHA1")
            val secret = SecretKeySpec(secretKey.toByteArray(), mac.algorithm)
            mac.init(secret)
            val bytes = mac.doFinal(queryStr.toByteArray())
            val sign = bytesToHex(bytes)

            showSign(sign.toString())
        }
        catch (e: Exception){
            Toast.makeText(this, e.localizedMessage, Toast.LENGTH_LONG).show()
            edtJsonString.text.clear()
        }

    }

    private fun getJsonString(): String{

        return if (edtJsonString.text.isNotBlank()){
            edtJsonString.text.toString()
        } else{
            getJsonFromObject(PaymentChannelRequest()).also {
                Toast.makeText(this, "Generated by default object", Toast.LENGTH_LONG).show()
            }
        }

    }

    private fun getQueryString(): String{

        return if (edtJsonString.text.isNotBlank()){
            edtJsonString.text.toString()
        } else{
            "language=en&merchantCode=T05280001&method=get.payment.channel&nonceStr=11AB&signType=HmacSHA1&version=1.0"
                .also { Toast.makeText(this, "Generated by default query", Toast.LENGTH_LONG).show() }
        }

    }

    private fun bytesToHex(hashInBytes: ByteArray): String? {
        val sb = StringBuilder()
        for (b in hashInBytes) {
            sb.append(String.format("%02x", b))
        }
        return sb.toString()
    }

    private class PaymentChannelRequest {
        val language: String = "en"
        val merchantCode: String = "T05280001"
        val method: String = "get.payment.channel"
        val nonceStr: String = "11AB"
        val signType: String = "HmacSHA1"
        val version: String = "1.0"
    }

    private fun getPaymentCreateRequest(): PaymentCreateRequest{
        return PaymentCreateRequest(
            amount = 1000,
            callbackInfo = "",
            callbackUrl = "https://tst-gds-admin.getmya.io/cllback",
            channelCode = "1001",
            currencyCode = 104,
            expired = 1800,
            language = "en",
            merchantCode = "T05280001",
            merchantTradeNo = "M1000000343",
            method = "get.payment.create",
            nonceStr = "VEGN",
            otcMerchantCode = "100000066",
            remark = "Shopping payment",
            signType = "HmacSHA1",
            version = "1.0"
        )
    }

    private fun getJsonFromObject(`object`: Any): String {
        val gSon = GsonBuilder().serializeNulls().create()
        return gSon.toJson(`object`)
    }

    private fun getQueryString(unParsedString: String): String{
        val sb = StringBuilder()
        val json = JSONObject(unParsedString)
        val keys: Iterator<String> = json.keys()
        while (keys.hasNext()) {
            val key = keys.next()
            sb.append(key)
            sb.append("=")
            sb.append(json.get(key))
            if (keys.hasNext()) sb.append("&")
        }
        return sb.toString()
    }

    private fun showSign(sign: String) {
        tvSign.text = sign
    }

    private fun clearTexts(){
        edtJsonString.text.clear()
        edtSecretKey.text.clear()
        tvSign.text = "Sign"
        Toast.makeText(this, "Texts cleared", Toast.LENGTH_LONG).show()
    }

}
